---
import Layout from "../layouts/Layout.astro";
import samples from '../common/js_objects/samples.js';
import utils from '../common/utils.js';

const data = await utils.groupByV2('student_id',samples);

const students = await utils.byStudentV2(data);

---
<Layout title="Visualizer">
  <main>
    <h1>Visualizer</h1>
    <div class="chart-container">

     </div>
    <div>
      {
        students.map((student) => {
          return (
            <section>
              <h2>{student.student}</h2> 
              <div class="visualizer">
              {
                student.drawings.map((drawing) => {
                
                  return (
                    <div class="drawing" data-sample={drawing.id} id={`sample_${drawing.id}`}>
                      <h3>{drawing.drawing}</h3>
                      <img src={`/data/img/${drawing.img}`} decoding="async"
                      loading="lazy" alt={drawing.drawing} />
                    </div>
                  )
                })
              }
              </div>
            </section>
          )
        })
      }
    </div>
    
  </main>
</Layout>

<style>
  main {
    color: white;
    width: 100% !important;

  }
  .visualizer{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    
  }
  .drawing {
    background-color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    
    padding: 2rem 2rem;
    color: black;
    font-size: .8rem;
  }
  img {
    display: block;
    max-width: 100%;
    object-fit: cover;
  }
  .emphasize {
    background-color: blueviolet;
  }
</style>

<script>

  import features from '../common/js_objects/features.js';
  import utils from '../common/utils.js';
  import Chart from '../js/chart.js';
  import graphics from '../js/graphics.js';


  const { featureNames,samples } = features;


  const options = {
    size: 600,
    axesLabels: featureNames,
    styles: utils.styles,
    transparency: 0.7,
    icon: "image",
  }

  graphics.generateImages(utils.styles,15);


  const chart = new Chart(document.querySelector('.chart-container'), samples, options,handleClick);
  const drawings = document.querySelectorAll('.drawing');

  drawings.forEach((drawing) => {
    drawing.addEventListener('click', (e) => {
      const sample = samples.find(sample => sample.id === Number(e.currentTarget.dataset.sample));
      handleClick(sample,false);
    });
  });

  function handleClick(sample,doScroll=true) {
    if(!sample) {
      document.querySelectorAll('.emphasize').forEach(el => {
      el.classList.remove('emphasize');
    });
    return; 
    }
    

    const el = document.getElementById(`sample_${sample.id}`);

    if (el.classList.contains('emphasize')) {
      el.classList.remove('emphasize');
      chart.selectSample(null);
      return;
    }

    document.querySelectorAll('.emphasize').forEach(el => {
      el.classList.remove('emphasize');
    });

    console.log(`sample_${sample.id}`);

    el.classList.add('emphasize');
    if(doScroll) el.scrollIntoView({behavior: 'smooth'});
    chart.selectSample(sample);
  }

</script>
