---
import Layout from "../layouts/Layout.astro";
import samples from '../common/js_objects/samples.js';
import utils from '../common/utils.js';


const data = await utils.groupByV2('student_id',samples);
const students = await utils.byStudentV2(data);

---
<Layout title="Visualizer">
  <header >
    <h1>Visualizer</h1>
    <button>Show Sketchpad</button>
  </header>
  <main >

    <section class="app-container hide-image-grid">

    <div class="container">
     
      <div class="sketchpad-container">

      </div>
   
      <div class="chart-container">
  
      </div>

      <div class="visualizer-container">
        {
          students.map((student) => {
            return (
              <section>
                <h2>{student.student}</h2> 
                <div class="visualizer">
                {
                  student.drawings.map((drawing) => {
                  
                    return (
                      <div class="drawing" data-sample={drawing.id} id={`sample_${drawing.id}`}>
                        <h3>{drawing.drawing}</h3>
                        <img src={`/data/img/${drawing.img}`} decoding="async"
                        loading="lazy" alt={drawing.drawing} />
                      </div>
                    )
                  })
                }
                </div>
              </section>
            )
          })
        }
      </div>
    </div>
    
  </main>
</section>
</Layout>

<style>

  body {
    color: white;
    width: 100% !important;
    
    padding-top: 1rem;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 0rem 2rem ;
    padding-bottom: 2rem;

  }

  main {
    position: relative;
  }
  .app-container.hide-image-grid::after {
    content: "";
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: hsl(220, 10%, 40%,0.8);
  }
  .container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap:1rem;
  }
  .visualizer-container {
    padding: 1rem;
    border-radius: 1rem;
    position: relative;
  }

  .visualizer{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
    gap:1rem;
   
    
  }
  .drawing {
    background-color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    
    padding: 2rem 2rem;
    color: black;
    font-size: .8rem;
  }
  img {
    display: block;
    max-width: 100%;
    object-fit: cover;
  }
  .emphasize {
    background-color: hsl(12, 80%, 59%);
  }
  .sketchpad-container {
    position: fixed;
    left: 0;
    margin-left: 2rem;
    top: 70%;
    transform: translateY(-70%);
    background-color: white;
    padding: 1rem;
    z-index: 1;
    display: flex;
		flex-direction: column;
		gap: 2rem;
		align-items: center;
    
  }
  .chart-container {
    z-index: 1;
    position: fixed;
    right: 0;
    margin-right: 2rem;
    top: 70%;
    transform: translateY(-70%);
  }
  
</style>

<script>

  import features from '../common/js_objects/features.js';
  import minMax from '../common/js_objects/minMax';
  import stdDev from '../common/js_objects/stdDev.js';
  import utils from '../common/utils.js';
  import Chart from '../js/chart.js';
  import graphics from '../js/graphics.js';

  import { Sketchpad } from '../js/sketchPad.js';
  import featureUtils from '../common/features.js';
  const container = document.querySelector('.sketchpad-container');
  const labelEl = document.createElement('p');

  labelEl.style.color = 'hsl(122, 80%, 19%)';
  labelEl.style.fontSize = '2rem';
  container.appendChild(labelEl);


  const { featureNames,samples } = features;


  const options = {
    size: 500,
    axesLabels: featureNames,
    styles: utils.styles,
    transparency: 0.7,
    icon: "image",
  }

  graphics.generateImages(utils.styles,15);


  const chart = new Chart(document.querySelector('.chart-container'), samples, options,handleClick);
  const drawings = document.querySelectorAll('.drawing');

  drawings.forEach((drawing) => {
    drawing.addEventListener('click', (e) => {
      const sample = samples.find(sample => sample.id === Number(e.currentTarget.dataset.sample));
      handleClick(sample,false);
    });
  });

  function handleClick(sample,doScroll=true) {
    if(!sample) {
      document.querySelectorAll('.emphasize').forEach(el => {
      el.classList.remove('emphasize');
    });
    return; 
    }
    

    const el = document.getElementById(`sample_${sample.id}`);

    if (el.classList.contains('emphasize')) {
      el.classList.remove('emphasize');
      chart.selectSample(null);
      return;
    }

    document.querySelectorAll('.emphasize').forEach(el => {
      el.classList.remove('emphasize');
    });


    el.classList.add('emphasize');
    if(doScroll) el.scrollIntoView({behavior: 'smooth'});
    chart.selectSample(sample);
  }


  function classify(point) {
    const samplePoints = samples.map(sample => sample.point);
    const index = utils.getNearest(point, samplePoints); 
    const nearestSample = samples[index];
    return {label: nearestSample.label, nearestSample};
  }
 
  function onDrawingUpdate(paths){

    console.log({paths});
    const funcs = featureUtils.inUse.map((feature) => {
        return feature.function;
    });
   
    const point = funcs.map((func) => {
      return func(paths);
    });

    console.log({point});

    //utils.normalizePoints([point],minMax);

    utils.standardizePoints([point],stdDev);

    

    const {label, nearestSample} = classify(point);
    console.log(label);

    showNearestLabel(label);

    chart.showDynamicPoint(point,label,nearestSample);
  }

  function showNearestLabel(label) {
    labelEl.innerText = `Is it a ${label}?`;
  }

  const sketchpad = new Sketchpad(container,onDrawingUpdate);

</script>
