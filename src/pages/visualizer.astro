---

import Layout from "../layouts/Layout.astro";
import training from '../common/js_objects/training';
import testing from '../common/js_objects/testing';
import utils from '../common/utils.js';


const trainingSamples = [...training.samples];
const testingSamples = [...testing.samples];




const dataTraining = await utils.groupByV2('student_id',trainingSamples);
const studentsTraining = await utils.byStudentV2(dataTraining);

const dataTesting = await utils.groupByV2('student_id',testingSamples);
const studentsTesting = await utils.byStudentV2(dataTesting);



---
<Layout title="Visualizer">
  <header >
    <h1>Visualizer</h1>
    <button>Show Sketchpad</button>
  </header>
  <main >

    <section class="app-container">

    <div class="container">

      <div class="accuracy-container">
        <p></p>
      </div>
     
      <div class="sketchpad-container">

      </div>
   
      <div class="chart-container">
  
      </div>

      <div class="visualizer-container">
        <h2>Accuracy:  %</h2>
        {
          studentsTraining.map((student) => {
            return (
              <section>
                <h2>{student.student}</h2> 
                <div class="visualizer">
                {
                  student.drawings.map((drawing) => {
                   
                    return (
                      <div class={`drawing`} data-sample={drawing.id} id={`sample_${drawing.id}`}>
                        <h3>{drawing.drawing}</h3>
                        <img src={`/data/img/${drawing.img}`} decoding="async"
                        loading="lazy" alt={drawing.drawing} />
                      </div>
                    )
                  })
                }
                </div>
              </section>
            )
          })
        }
        <h2>Testing</h2>

{
  studentsTesting.map((student) => {
    return (
      <section>
        <h2>{student.student}</h2> 
        <div class="visualizer">
        {
          student.drawings.map((drawing) => {
            return (
              <div class={`drawing`} data-set="testing" data-sample={drawing.id} id={`sample_${drawing.id}`}>
                <h3>{drawing.drawing}</h3>
                <img src={`/data/img/${drawing.img}`} decoding="async"
                loading="lazy" alt={drawing.drawing} />
              </div>
            )
          })
        }
        </div>
      </section>
    )
  })
}
      </div>
    </div>
    
  </main>
</section>
</Layout>

<style>

  :root {
    --shadow-color: 232deg 90% 69%;
    --shadow-elevation-medium:
    0px 0.3px 0.3px hsl(var(--shadow-color) / 0.39),
    0px 0.9px 1px -0.9px hsl(var(--shadow-color) / 0.37),
    0px 2.4px 2.6px -1.8px hsl(var(--shadow-color) / 0.36),
    0px 6px 6.6px -2.7px hsl(var(--shadow-color) / 0.34);
    --shadow-elevation-high:
    0px 0.3px 0.3px hsl(var(--shadow-color) / 0.36),
    0px 1.6px 1.8px -0.4px hsl(var(--shadow-color) / 0.35),
    0px 3.1px 3.4px -0.8px hsl(var(--shadow-color) / 0.34),
    0px 5.1px 5.6px -1.2px hsl(var(--shadow-color) / 0.34),
    0px 8.3px 9.1px -1.5px hsl(var(--shadow-color) / 0.33),
    0px 13.1px 14.3px -1.9px hsl(var(--shadow-color) / 0.33),
    0.1px 20.1px 22px -2.3px hsl(var(--shadow-color) / 0.32),
    0.1px 29.8px 32.6px -2.7px hsl(var(--shadow-color) / 0.31);
  }

  body {
    color: white;
    width: 100% !important;
    
    padding-top: 1rem;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 0rem 2rem ;
    padding-bottom: 2rem;

  }

  main {
    position: relative;
  }
  .app-container.hide-image-grid::after {
    content: "";
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: hsl(220, 10%, 40%,0.8);
  }
  .container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap:1rem;
  }
  .visualizer-container {
    padding: 1rem;
    border-radius: 1rem;
    position: relative;
  }

  .visualizer{
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
    gap:1rem;
   
    
  }
  .drawing {
    background-color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    
    padding: 2rem 2rem;
    color: black;
    font-size: .8rem;
  }

  .drawing.correct {
    background-color: hsl(84, 56%, 63%);
  }

  img {
    display: block;
    max-width: 100%;
    object-fit: cover;
  }
  .emphasize {
    background-color: hsl(12, 80%, 59%)!important;
  }
  .sketchpad-container {
    position: fixed;
    left: 0;
    margin-left: 2rem;
    top: 70%;
    transform: translateY(-70%);
    background-color: white;
    padding: 1rem;
    z-index: 1;
    display: flex;
		flex-direction: column;
		gap: 2rem;
		align-items: center;
    
  }
  .chart-container {
    z-index: 1;
    position: fixed;
    right: 0;
    margin-right: 2rem;
    top: 70%;
    transform: translateY(-70%);
  }
  .accuracy-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    font-size: 1.5rem;
    position: fixed;
    top: 50%;
    left: 40%;
    transform: translateY(-50%);
    background-color: hsl(232, 90%, 69%);
    box-shadow: var(--shadow-elevation-medium);
    z-index: 30;
    padding: 1rem;
    border-radius: 1rem;

  }
  
</style>

<script>
  import constants from '../common/constants.js';
  import features from '../common/js_objects/features.js';
  import training from '../common/js_objects/training';
  import testing from '../common/js_objects/testing';
  import KNN from '../common/classifiers/knn.js';

  import minMax from '../common/js_objects/minMax';
  import utils from '../common/utils.js';
  import Chart from '../js/chart.js';
  import graphics from '../js/graphics.js';

  import { Sketchpad } from '../js/sketchPad.js';
  import featureUtils from '../common/features.js';
  const container = document.querySelector('.sketchpad-container');
  const labelEl = document.createElement('p');
  const accuracyEl = document.querySelector('.accuracy-container > p');


 

  labelEl.style.color = 'hsl(122, 80%, 19%)';
  labelEl.style.fontSize = '2rem';
  container.appendChild(labelEl);


  const { featureNames,samples } = features;
  const trainingSamples = training.samples;

  const options = {
    size: 500,
    axesLabels: featureNames,
    styles: utils.styles,
    transparency: 0.7,
    icon: "image",
    bg: new Image(),
  };

  options.bg.src = constants.DECISION_BOUNDARY;


  graphics.generateImages(utils.styles,15);


  const chart = new Chart(document.querySelector('.chart-container'), trainingSamples, options,handleClick);
  const drawings = document.querySelectorAll('.drawing');
  const testingDrawings = document.querySelectorAll('[data-set="testing"]');

  const knn = new KNN(trainingSamples,10);

  drawings.forEach((drawing) => {
    drawing.addEventListener('click', (e) => {
      const sample = samples.find(sample => sample.id === Number(e.currentTarget.dataset.sample));
      handleClick(sample,false);
    });
  });

  function handleClick(sample,doScroll=true) {
    if(!sample) {
      document.querySelectorAll('.emphasize').forEach(el => {
      el.classList.remove('emphasize');
    });
    return; 
    }
    
    const el = document.getElementById(`sample_${sample.id}`);

    if (el.classList.contains('emphasize')) {
      el.classList.remove('emphasize');
      chart.selectSample(null);
      return;
    }

    document.querySelectorAll('.emphasize').forEach(el => {
      el.classList.remove('emphasize');
    });


    el.classList.add('emphasize');
    if(doScroll) el.scrollIntoView({behavior: 'smooth'});
    chart.selectSample(sample);
  }

  async function onDrawingUpdate(paths){
    const funcs = featureUtils.inUse.map((feature) => {
        return feature.function;
    });
   
    const point = funcs.map((func) => {
      return func(paths);
    });

    utils.normalizePoints([point],minMax);

    const {label, nearestSamples} = knn.predict(point);
    
    showNearestLabel(label);

    chart.showDynamicPointK(point,label,nearestSamples);
  }

  function showNearestLabel(label) {
    labelEl.innerText = `Is it a ${label}?`;
  }

   new Sketchpad(container,onDrawingUpdate);

  //console.log('hey...');
  //await waait(500);
  const accuracy = await utils.calculateAccuracy(testing.samples,testingDrawings,knn);
 
  accuracyEl.innerText = accuracy;

 

</script>
